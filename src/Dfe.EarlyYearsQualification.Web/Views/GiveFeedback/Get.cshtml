@using Dfe.EarlyYearsQualification.Web.Models.Content
@using Dfe.EarlyYearsQualification.Web.Models.Content.QuestionModels
@model Dfe.EarlyYearsQualification.Web.Models.Content.FeedbackFormPageModel

@{
    ViewData["Title"] = Model.Heading;
}

@section Scripts
{
    <script src="~/js/pages/feedback-form-page.js" asp-append-version="true"></script>
}

@section BeforeMainContent {
    @{
        await Html.RenderPartialAsync("Partials/BackButton", Model.BackButton);
    }
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-full govuk-grid-column-two-thirds-from-desktop">
        @if (Model.ErrorSummaryModel != null)
        {
            await Html.RenderPartialAsync("Partials/ErrorSummary", Model.ErrorSummaryModel!);
        }

        <h1 id="feedback-page-heading" class="govuk-heading-xl">@Model.Heading</h1>
        <div id="feedback-page-body" class="govuk-body">
            <div class="govuk-!-margin-bottom-7" id="post-heading-content">
                @Html.Raw(Model.PostHeadingContent)
            </div>
            @using (Html.BeginForm("Post", "GiveFeedback", FormMethod.Post, new { id = "feedback-form" }))
            {
                @for (var questionIndex = 0; questionIndex < Model.Questions.Count; questionIndex++)
                {
                    var question = Model.Questions[questionIndex];
                    var questionId = $"{questionIndex}_question";
                    <div class="govuk-!-margin-bottom-7">
                        @if (question.GetType() == typeof(FeedbackFormQuestionRadioModel))
                        {
                            var questionData = question as FeedbackFormQuestionRadioModel;
                            <input type="hidden" name="QuestionList[@questionIndex].Question"
                                   value="@questionData!.Question"/>
                            <div
                                class="govuk-form-group @(Model.QuestionList[questionIndex].HasError ? "govuk-form-group--error" : "")">
                                <h2 class="govuk-heading-m" id="@questionId">@questionData.Question</h2>
                                <div class="govuk-radios" data-module="govuk-radios">
                                    @foreach (var option in questionData.OptionsItems)
                                    {
                                        var optionModel = option as OptionModel;
                                        var @checked = optionModel!.Value == Model.QuestionList[questionIndex].Answer ? "checked" : "";
                                        var radioButtonId = $"{questionIndex}_{optionModel.Value}";
                                        if (Model.ErrorSummaryModel != null && Model.ErrorSummaryModel.ErrorSummaryLinks.Exists(x => x.ElementLinkId == radioButtonId))
                                        {
                                            var errorId = $"{questionId}_error-message";
                                            <p class="govuk-error-message" id="@errorId">
                                                <span
                                                    class="govuk-visually-hidden">Error:</span>@Model.QuestionList[questionIndex].ErrorMessage
                                            </p>
                                        }

                                        <div class="govuk-radios__item">
                                            @Html.RadioButtonFor(x => x.QuestionList[questionIndex].Answer, optionModel.Value, new { @class = "govuk-radios__input", id = radioButtonId, @checked })
                                            <label class="govuk-label govuk-radios__label" for="@radioButtonId">
                                                @optionModel.Label
                                            </label>
                                            @if (!string.IsNullOrEmpty(optionModel.Hint))
                                            {
                                                var hintId = $"{optionModel.Value}_hint";
                                                <div id="@hintId" class="govuk-hint govuk-radios__hint">
                                                    @optionModel.Hint
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        else if (question.GetType() == typeof(FeedbackFormQuestionTextAreaModel))
                        {
                            var questionData = question as FeedbackFormQuestionTextAreaModel;
                            <input type="hidden" name="QuestionList[@questionIndex].Question"
                                   value="@questionData!.Question"/>
                            <div
                                class="govuk-form-group @(Model.QuestionList[questionIndex].HasError ? "govuk-form-group--error" : "")">
                                <h2 class="govuk-heading-m" id="@questionId">@questionData.Question</h2>
                                @if (!string.IsNullOrEmpty(questionData.HintText))
                                {
                                    var hintId = $"textarea_{questionIndex}_hint";
                                    <div class="govuk-hint" id="@hintId">
                                        @questionData.HintText
                                    </div>
                                }

                                @{ var textAreaId = $"{questionIndex}_textArea"; }
                                @if (Model.ErrorSummaryModel != null && Model.ErrorSummaryModel.ErrorSummaryLinks.Exists(x => x.ElementLinkId == textAreaId))
                                {
                                    var errorId = $"{questionId}_error-message";
                                    <p class="govuk-error-message" id="@errorId">
                                        <span
                                            class="govuk-visually-hidden">Error:</span>@Model.QuestionList[questionIndex].ErrorMessage
                                    </p>
                                }
                                @Html.TextAreaFor(x => x.QuestionList[questionIndex].Answer, 5, 1, new { @class = "govuk-textarea", id = textAreaId })
                            </div>
                        }
                        else if (question.GetType() == typeof(FeedbackFormQuestionRadioAndInputModel))
                        {
                            var questionData = question as FeedbackFormQuestionRadioAndInputModel;
                            <input type="hidden" name="QuestionList[@questionIndex].Question"
                                   value="@questionData!.Question"/>
                            <div
                                class="govuk-form-group @(Model.ErrorSummaryModel != null && Model.ErrorSummaryModel.ErrorSummaryLinks.Exists(x => x.ErrorBannerLinkText == Model.QuestionList[questionIndex].ErrorMessage && !x.ElementLinkId.Contains("additionalInfo")) ? "govuk-form-group--error" : "")">
                                <h2 class="govuk-heading-m" id="@questionId">@questionData.Question</h2>
                                <div class="govuk-radios" data-module="govuk-radios">
                                    @for (var optionIndex = 0; optionIndex < questionData.OptionsItems.Count; optionIndex++)
                                    {
                                        var optionModel = questionData.OptionsItems[optionIndex] as OptionModel;
                                        var @checked = optionModel!.Value == Model.QuestionList[questionIndex].Answer ? "checked" : "";
                                        var radioButtonId = $"{questionIndex}_{optionModel.Value}";
                                        var conditionalElementClass = optionIndex == 0 ? "has__conditional__element" : "has__no__conditional__element";
                                        if (Model.ErrorSummaryModel != null && Model.ErrorSummaryModel.ErrorSummaryLinks.Exists(x => x.ElementLinkId == radioButtonId))
                                        {
                                            var errorId = $"{questionId}_error-message";
                                            <p class="govuk-error-message" id="@errorId">
                                                <span
                                                    class="govuk-visually-hidden">Error:</span>@Model.QuestionList[questionIndex].ErrorMessage
                                            </p>
                                        }

                                        <div class="govuk-radios__item">
                                            @Html.RadioButtonFor(x => x.QuestionList[questionIndex].Answer, optionModel.Value, new { @class = $"govuk-radios__input {conditionalElementClass}", id = radioButtonId, @checked })
                                            <label class="govuk-label govuk-radios__label" for="@radioButtonId">
                                                @optionModel.Label
                                            </label>
                                            @if (!string.IsNullOrEmpty(optionModel.Hint))
                                            {
                                                var hintId = $"{optionModel.Value}_hint";
                                                <div id="@hintId" class="govuk-hint govuk-radios__hint">
                                                    @optionModel.Hint
                                                </div>
                                            }
                                            @*We associate the input with the first option*@
                                            @if (optionIndex == 0)
                                            {
                                                var additionalInfoId = $"{questionIndex}_additionalInfo";
                                                var additionalInfoHasError = Model.ErrorSummaryModel != null && Model.ErrorSummaryModel.ErrorSummaryLinks.Exists(x => x.ElementLinkId == additionalInfoId);
                                                <div class="govuk-radios__conditional">
                                                    <div class="govuk-form-group @(additionalInfoHasError ? "govuk-form-group--error" : "")">
                                                        <label class="govuk-label">
                                                            @questionData.InputHeading
                                                        </label>
                                                        @if (!string.IsNullOrEmpty(questionData.InputHeadingHintText))
                                                        {
                                                            var hintId = $"{questionData.InputHeading}_hint";
                                                            <div id="@hintId" class="govuk-hint">
                                                                @questionData.InputHeadingHintText
                                                            </div>
                                                        }
                                                        @if (additionalInfoHasError)
                                                        {
                                                            var errorId = $"{questionId}_error-message-additional-info";
                                                            <p class="govuk-error-message additional-info-error" id="@errorId">
                                                                <span
                                                                    class="govuk-visually-hidden">Error:</span>@Model.QuestionList[questionIndex].ErrorMessage
                                                            </p>
                                                        }
                                                        @{
                                                            var additionalInfoCss = additionalInfoHasError? "govuk-input govuk-!-width-one-half govuk-input--error" : "govuk-input govuk-!-width-one-half";
                                                        }
                                                        @Html.TextBoxFor(x => x.QuestionList[questionIndex].AdditionalInfo, "", new { @class=additionalInfoCss, id = additionalInfoId })
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }

                <button id="feedback-form-submit" type="submit" class="govuk-button"
                        data-module="govuk-button">@Model.CtaButtonText</button>
            }
        </div>
    </div>
</div>