@using System.Globalization
@model Dfe.EarlyYearsQualification.Web.Models.Content.QualificationDetailsModel

@{
    ViewData["Title"] = $"Qualification Details - {Model.QualificationId}";
}

@section BeforeMainContent {
    @{
        await Html.RenderPartialAsync("Partials/BackButton", Model.BackButton);
    }
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-full govuk-grid-column-two-thirds-from-desktop">
        <h1 class="govuk-heading-xl" id="page-header">@Model.Content!.MainHeader</h1>
        <h2 class="govuk-heading-l" id="qualification-details-header">@Model.Content.QualificationDetailsSummaryHeader</h2>
        <dl class="govuk-summary-list">
            <div class="govuk-summary-list__row">
                <dt class="govuk-summary-list__key" id="qualification-name-label">
                    @Model.Content.QualificationNameLabel
                </dt>
                <dd class="govuk-summary-list__value" id="qualification-name-value">
                    @Model.QualificationName
                </dd>
            </div>
            <div class="govuk-summary-list__row">
                <dt class="govuk-summary-list__key" id="qualification-level-label">
                    @Model.Content.LevelLabel
                </dt>
                <dd class="govuk-summary-list__value" id="qualification-level-value">
                    @Model.QualificationLevel
                </dd>
            </div>
            <div class="govuk-summary-list__row">
                <dt class="govuk-summary-list__key" id="awarding-organisation-label">
                    @Model.Content.AwardingOrgLabel
                </dt>
                <dd class="govuk-summary-list__value" id="awarding-organisation-value">
                    @Model.AwardingOrganisationTitle
                </dd>
            </div>
            <div class="govuk-summary-list__row">
                <dt class="govuk-summary-list__key" id="date-started-date-label">
                    @Model.Content.QualificationStartDateLabel
                </dt>
                <dd class="govuk-summary-list__value" id="date-started-date-value">
                    @Model.DateStarted
                </dd>
            </div>
            @if (Model.AdditionalRequirementAnswers != null)
            {
                for (var count = 0; count < Model.AdditionalRequirementAnswers.Count; count++)
                {
                    <div class="govuk-summary-list__row">
                        <dt class="govuk-summary-list__key" id="additional-requirement-@count-label">
                            @Model.AdditionalRequirementAnswers[count].ConfirmationStatement
                        </dt>
                        <dd class="govuk-summary-list__value" id="additional-requirement-@count-value">
                            @CultureInfo.CurrentCulture.TextInfo.ToTitleCase(Model.AdditionalRequirementAnswers[count].Answer!.ToLower())
                        </dd>
                    </div>
                }
            }
            <div class="govuk-summary-list__row">
                <dt class="govuk-summary-list__key" id="date-of-check-label">
                    @Model.Content.DateOfCheckLabel
                </dt>
                <dd class="govuk-summary-list__value" id="date-of-check-value">
                    @DateTime.UtcNow.ToString("dd MMMM yyyy")
                </dd>
            </div>
        </dl>
    </div>
    <div class="govuk-grid-column-full govuk-!-static-margin-top-6">
        <h2 class="govuk-heading-l" id="ratio-heading">@Model.Content.RatiosHeading</h2>
        @Html.Raw(Model.Content.RatiosText)
        @{
            if (Model.RatioRequirements.ApprovedForLevel2
                || Model.RatioRequirements.ApprovedForLevel3
                || Model.RatioRequirements.ApprovedForLevel6
                || Model.RatioRequirements.ApprovedForUnqualified)
            {
                if (Model.RatioRequirements.ApprovedForLevel6)
                {
                    await Html.RenderPartialAsync("Partials/RatioRow", new RatioRowModel
                                                                       {
                                                                           LevelText = "Level 6",
                                                                           IsApproved = Model.RatioRequirements.ApprovedForLevel6,
                                                                           AdditionalInformation = new AdditionalInformationModel
                                                                                                   {
                                                                                                       AdditionalInformationHeader = Model.RatioRequirements.RequirementsHeadingForLevel6,
                                                                                                       AdditionalInformationBody = Model.RatioRequirements.RequirementsForLevel6
                                                                                                   }
                                                                       });
                }

                if (Model.RatioRequirements.ApprovedForLevel3)
                {
                    await Html.RenderPartialAsync("Partials/RatioRow", new RatioRowModel
                                                                       {
                                                                           LevelText = "Level 3",
                                                                           IsApproved = Model.RatioRequirements.ApprovedForLevel3,
                                                                           AdditionalInformation = new AdditionalInformationModel
                                                                                                   {
                                                                                                       AdditionalInformationHeader = Model.RatioRequirements.RequirementsHeadingForLevel3,
                                                                                                       AdditionalInformationBody = Model.RatioRequirements.RequirementsForLevel3
                                                                                                   }
                                                                       });
                }

                if (Model.RatioRequirements.ApprovedForLevel2)
                {
                    await Html.RenderPartialAsync("Partials/RatioRow", new RatioRowModel
                                                                       {
                                                                           LevelText = "Level 2",
                                                                           IsApproved = Model.RatioRequirements.ApprovedForLevel2,
                                                                           AdditionalInformation = new AdditionalInformationModel
                                                                                                   {
                                                                                                       AdditionalInformationHeader = Model.RatioRequirements.RequirementsHeadingForLevel2,
                                                                                                       AdditionalInformationBody = Model.RatioRequirements.RequirementsForLevel2
                                                                                                   }
                                                                       });
                }

                if (Model.RatioRequirements.ApprovedForUnqualified)
                {
                    await Html.RenderPartialAsync("Partials/RatioRow", new RatioRowModel
                                                                       {
                                                                           LevelText = "Unqualified",
                                                                           IsApproved = Model.RatioRequirements.ApprovedForUnqualified,
                                                                           AdditionalInformation = new AdditionalInformationModel
                                                                                                   {
                                                                                                       AdditionalInformationHeader = Model.RatioRequirements.RequirementsHeadingForUnqualified,
                                                                                                       AdditionalInformationBody = Model.RatioRequirements.RequirementsForUnqualified
                                                                                                   }
                                                                       });
                }
            }

            if (!Model.RatioRequirements.ApprovedForLevel2
                || !Model.RatioRequirements.ApprovedForLevel3
                || !Model.RatioRequirements.ApprovedForLevel6
                || !Model.RatioRequirements.ApprovedForUnqualified)
            {
                if (!Model.RatioRequirements.ApprovedForUnqualified)
                {
                    await Html.RenderPartialAsync("Partials/RatioRow", new RatioRowModel
                                                                       {
                                                                           LevelText = "Unqualified",
                                                                           IsApproved = Model.RatioRequirements.ApprovedForUnqualified,
                                                                           AdditionalInformation = new AdditionalInformationModel
                                                                                                   {
                                                                                                       AdditionalInformationHeader = Model.RatioRequirements.RequirementsHeadingForUnqualified,
                                                                                                       AdditionalInformationBody = Model.RatioRequirements.RequirementsForUnqualified
                                                                                                   }
                                                                       });
                }

                if (!Model.RatioRequirements.ApprovedForLevel2)
                {
                    await Html.RenderPartialAsync("Partials/RatioRow", new RatioRowModel
                                                                       {
                                                                           LevelText = "Level 2",
                                                                           IsApproved = Model.RatioRequirements.ApprovedForLevel2,
                                                                           AdditionalInformation = new AdditionalInformationModel
                                                                                                   {
                                                                                                       AdditionalInformationHeader = Model.RatioRequirements.RequirementsHeadingForLevel2,
                                                                                                       AdditionalInformationBody = Model.RatioRequirements.RequirementsForLevel2
                                                                                                   }
                                                                       });
                }
                
                if (!Model.RatioRequirements.ApprovedForLevel3)
                {
                    await Html.RenderPartialAsync("Partials/RatioRow", new RatioRowModel
                                                                       {
                                                                           LevelText = "Level 3",
                                                                           IsApproved = Model.RatioRequirements.ApprovedForLevel3,
                                                                           AdditionalInformation = new AdditionalInformationModel
                                                                                                   {
                                                                                                       AdditionalInformationHeader = Model.RatioRequirements.RequirementsHeadingForLevel3,
                                                                                                       AdditionalInformationBody = Model.RatioRequirements.RequirementsForLevel3
                                                                                                   }
                                                                       });
                }
                
                if (!Model.RatioRequirements.ApprovedForLevel6)
                {
                    await Html.RenderPartialAsync("Partials/RatioRow", new RatioRowModel
                                                                       {
                                                                           LevelText = "Level 6",
                                                                           IsApproved = Model.RatioRequirements.ApprovedForLevel6,
                                                                           AdditionalInformation = new AdditionalInformationModel
                                                                                                   {
                                                                                                       AdditionalInformationHeader = Model.RatioRequirements.RequirementsHeadingForLevel6,
                                                                                                       AdditionalInformationBody = Model.RatioRequirements.RequirementsForLevel6
                                                                                                   }
                                                                       });
                }
            }
        }

        <h2 class="govuk-heading-l govuk-!-static-margin-top-9" id="requirements-heading">@Model.Content!.RequirementsHeading</h2>

        @Html.Raw(Model.Content!.RequirementsText)

        <div class="govuk-!-static-margin-top-6">
            <button id="print-button" onclick="printButtonClicked();" class="govuk-link govuk-body-s print-button">@Model.Content!.PrintButtonText</button>
        </div>

        <p class="govuk-body govuk-!-static-margin-top-6">
            <a id="check-another-qualification-link" href="@Model.Content.CheckAnotherQualificationLink?.Href" class="govuk-link">@Model.Content.CheckAnotherQualificationLink?.DisplayText</a>
        </p>
    </div>
</div>