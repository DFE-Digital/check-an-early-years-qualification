run-name: 'Terraform Deploy - ${{inputs.environment}} (${{inputs.action}})'
name: 'Terraform Deploy'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Azure deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      
      action:
        description: Test the planned changes or plan and apply the changes
        default: 'Plan Only'
        type: choice
        options:
          - 'Plan Only'
          - 'Plan & Apply'

defaults:
  run:
    working-directory: ./terraform

# Permissions for OIDC authentication
permissions:
  id-token: write
  contents: write
  issues: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_USE_OIDC: true

jobs:
  terraform:
    name: 'Terraform Plan and Apply'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v5

      # Install the latest version of the Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5
          terraform_wrapper: false

      # Checks that all Terraform configuration files adhere to a canonical format
      # Will fail the build if not
      - name: Terraform Format
        run: terraform fmt -check

      # Sets an environment variable to contain the current IP address
      - name: IP address env
        run: echo "CURRENT_IP=$(curl https://api.ipify.org)" >> $GITHUB_ENV

      # Login to Azure using OIDC
      - name: Login to Azure CLI
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      # Allows the current IP address access to the storage account for later terraform steps in the workflow
      - name: Azure Storage IP access
        run:  az storage account network-rule add -g ${{ vars.RESOURCE_NAME_PREFIX }}-rg --account-name ${{ vars.WEBAPP_STORAGE_ACCOUNT_NAME }} --ip-address $CURRENT_IP

      # Initialise a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        env:
          TERRAFORM_STATE_RESOURCE_GROUP: ${{ secrets.TERRAFORM_STATE_RESOURCE_GROUP }}
          TERRAFORM_STATE_STORAGE_ACCOUNT_NAME: ${{ secrets.TERRAFORM_STATE_STORAGE_ACCOUNT_NAME }}
          TERRAFORM_STATE_STORAGE_CONTAINER_NAME: ${{ secrets.TERRAFORM_STATE_STORAGE_CONTAINER_NAME }}
          TERRAFORM_STATE_KEY: ${{ secrets.TERRAFORM_STATE_KEY }}
        run: >
          terraform init
          -backend-config="resource_group_name=$TERRAFORM_STATE_RESOURCE_GROUP"
          -backend-config="storage_account_name=$TERRAFORM_STATE_STORAGE_ACCOUNT_NAME"
          -backend-config="container_name=$TERRAFORM_STATE_STORAGE_CONTAINER_NAME"
          -backend-config="key=$TERRAFORM_STATE_KEY"
          
      - name: Generate Terraform Secrets
        id: terraform_secrets
        env:
          CACHE_ENDPOINT_SECRET: ${{ secrets.CACHE_ENDPOINT_SECRET }}
          CONTENTFUL_DELIVERY_API_KEY: ${{ secrets.CONTENTFUL_DELIVERY_API_KEY }}
          CONTENTFUL_PREVIEW_API_KEY: ${{ secrets.CONTENTFUL_PREVIEW_API_KEY }}
          CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
          GOVUK_NOTIFY_API_KEY: ${{ secrets.GOVUK_NOTIFY_API_KEY }}
          KV_CERTIFICATE_AUTHORITY_ADMIN_FIRST_NAME: ${{ secrets.KV_CERTIFICATE_AUTHORITY_ADMIN_FIRST_NAME }}
          KV_CERTIFICATE_AUTHORITY_ADMIN_LAST_NAME: ${{ secrets.KV_CERTIFICATE_AUTHORITY_ADMIN_LAST_NAME }}
          KV_CERTIFICATE_AUTHORITY_ADMIN_PHONE_NO: ${{ secrets.KV_CERTIFICATE_AUTHORITY_ADMIN_PHONE_NO }}
          KV_CERTIFICATE_AUTHORITY_PASSWORD: ${{ secrets.KV_CERTIFICATE_AUTHORITY_PASSWORD }}
          KV_CERTIFICATE_AUTHORITY_USERNAME: ${{ secrets.KV_CERTIFICATE_AUTHORITY_USERNAME }}
          KV_SERVICE_GOV_UK_CERTIFICATE_LABEL: ${{ secrets.KV_SERVICE_GOV_UK_CERTIFICATE_LABEL }}
          KV_SERVICE_GOV_UK_CERTIFICATE_SUBJECT: ${{ secrets.KV_SERVICE_GOV_UK_CERTIFICATE_SUBJECT }}
          WEBAPP_ACCESS_KEY_1: ${{ secrets.WEBAPP_ACCESS_KEY_1 }}
          WEBAPP_ACCESS_KEY_2: ${{ secrets.WEBAPP_ACCESS_KEY_2 }}
          WEBAPP_E2E_ACCESS_KEY: ${{ secrets.WEBAPP_E2E_ACCESS_KEY }}
          WEBAPP_TEAM_ACCESS_KEY: ${{ secrets.WEBAPP_TEAM_ACCESS_KEY }}
        run: |
          echo secrets='[
            \"CACHE_ENDPOINT_SECRET\"=$CACHE_ENDPOINT_SECRET,
            \"CONTENTFUL_DELIVERY_API_KEY\"=$CONTENTFUL_DELIVERY_API_KEY,
            \"CONTENTFUL_PREVIEW_API_KEY\"=$CONTENTFUL_PREVIEW_API_KEY,
            \"CONTENTFUL_SPACE_ID\"=$CONTENTFUL_SPACE_ID,
            \"GOVUK_NOTIFY_API_KEY\"=$GOVUK_NOTIFY_API_KEY,
            \"KV_CERTIFICATE_AUTHORITY_ADMIN_FIRST_NAME\"=$KV_CERTIFICATE_AUTHORITY_ADMIN_FIRST_NAME,
            \"KV_CERTIFICATE_AUTHORITY_ADMIN_LAST_NAME\"=$KV_CERTIFICATE_AUTHORITY_ADMIN_LAST_NAME,
            \"KV_CERTIFICATE_AUTHORITY_ADMIN_PHONE_NO\"=$KV_CERTIFICATE_AUTHORITY_ADMIN_PHONE_NO,
            \"KV_CERTIFICATE_AUTHORITY_PASSWORD\"=$KV_CERTIFICATE_AUTHORITY_PASSWORD,
            \"KV_CERTIFICATE_AUTHORITY_USERNAME\"=$KV_CERTIFICATE_AUTHORITY_USERNAME,
            \"KV_SERVICE_GOV_UK_CERTIFICATE_LABEL\"=$KV_SERVICE_GOV_UK_CERTIFICATE_LABEL,
            \"KV_SERVICE_GOV_UK_CERTIFICATE_SUBJECT\"=$KV_SERVICE_GOV_UK_CERTIFICATE_SUBJECT,
            \"WEBAPP_ACCESS_KEY_1\"=$WEBAPP_ACCESS_KEY_1,
            \"WEBAPP_ACCESS_KEY_2\"=$WEBAPP_ACCESS_KEY_2,
            \"WEBAPP_E2E_ACCESS_KEY\"=$WEBAPP_E2E_ACCESS_KEY,
            \"WEBAPP_TEAM_ACCESS_KEY\"=$WEBAPP_TEAM_ACCESS_KEY
          ]';
          secrets=secrets >> $GITHUB_OUTPUT

      # Generates Terraform input variables
      - name: Generate Terraform Variables
        shell: bash
        env:
          WEB_SECRETS: ${{ toJSON(steps.terraform_secrets.outputs.secrets) }}
          WEB_VARS: ${{ toJSON(vars) }}
        run: |
          printf '%s\n' "$WEB_SECRETS" > tmp-secrets.json
          printf '%s\n' "$WEB_VARS" > tmp-vars.json
          jq 'with_entries(.key |= ascii_downcase)' tmp-secrets.json > web-secrets.auto.tfvars.json
          jq 'with_entries(.key |= ascii_downcase)' tmp-vars.json > web-vars.auto.tfvars.json

      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
          
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          
          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi

      # Terraform Apply
      - name: Terraform Apply
        if: ${{ inputs.action == 'Plan & Apply' }}
        run: terraform apply -auto-approve tfplan
        
      - name: Restart App Service
        if: ${{ inputs.action == 'Plan & Apply' }}
        uses: ./.github/actions/restart-app-service
        with:
          resource_name_prefix: ${{ vars.RESOURCE_NAME_PREFIX }}
          webapp_name: ${{ vars.WEBAPP_NAME }}        
        